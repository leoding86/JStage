{"version":3,"sources":["JStage.js","Obj.js","Script.js","index.js"],"names":["JStage","el","width","height","this","getEl","scale","startTimestamp","currentTimestamp","duration","status","IS_IDLE","resources","objs","document","querySelector","jQuery","Node","nodeType","IS_FINISHED","prototype","addResource","resource","indexOf","push","loadResources","callbacks","len","length","loadedLen","forEach","image","Image","onload","console","log","onProgress","call","onComplete","src","complete","load","createObj","left","right","obj","Obj","appendObj","init","self","setScale","offsetWidth","offsetHeight","style","getReady","resizeEl","recal","wScale","hScale","start","window","requestAnimationFrame","update","bind","isStatic","setProgress","timestamp","finished","i","l","isCompleted","render","setTime","time","progress","stage","setStage","top","transform","scaleX","scaleY","transformState","transformPrevState","opacity","styleState","stylePrevState","prevObj","IS_STATIC","scripts","setEl","setSize","setPosition","IS_COMPLETED","IS_ANIMATING","setStyle","setTransform","func","value","property","setScripts","addScript","timingFunction","delay","Script","getScale","getStartTimestamp","getCurrentTimestamp","prop","getDuration","renderStyle","renderTransform","setElSize","setElWidth","setElHeight","setElPosition","setElLeft","setElTop","setElStyle","setElTransform","position","warn","isAnimating","isIdle","appendToStage","completed","script","updateState","reset","scriptDuration","isTransform","getProgressValue","transformStyle","transforms","normalizeTime","getTransitionStyle","slice","isNaN","root","factory","define","amd","module","exports"],"mappings":"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","file":"../JStage.min.js","sourcesContent":["/**\r\n * 舞台构造函数\r\n * @constructor\r\n * @param {int} el\r\n * @param {int} width 舞台的标准宽度，不是元素的实际宽度\r\n * @param {int} height 舞台的标准高度，不是元素的实际高度\r\n */\r\nfunction JStage(el, width, height) {\r\n    this.el = JStage.getEl(el);\r\n    this.width = width,\r\n    this.height = height,\r\n    this.scale,\r\n    this.startTimestamp,\r\n    this.currentTimestamp,\r\n    this.duration = 0,\r\n    this.status = JStage.IS_IDLE,\r\n    this.resources = [];\r\n    this.objs = [];\r\n}\r\n\r\nJStage.getEl = function(el) {\r\n    if (typeof el === 'string') {\r\n        return document.querySelector(el);\r\n    } else if (el instanceof jQuery) {\r\n        return el[0];\r\n    } else if (typeof el === 'object' &&\r\n        (el instanceof Node && el.nodeType > 0)\r\n    ) {\r\n        return el;\r\n    } else {\r\n        throw 'Invalid el';\r\n    }\r\n};\r\n\r\nJStage.IS_IDLE = 0;\r\nJStage.IS_FINISHED = 1;\r\n\r\nJStage.prototype = {\r\n    /**\r\n     * 添加资源\r\n     * @param {string} resource \r\n     */\r\n    addResource: function(resource) {\r\n        if (this.resources.indexOf(resource) < 0) {\r\n            this.resources.push(resource);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    loadResources: function(callbacks) {\r\n        var self = this;\r\n        var len = this.resources.length;\r\n        var loadedLen = 0;\r\n\r\n        this.resources.forEach(function(resource) {\r\n            var image = new Image;\r\n            image.onload = function() {\r\n                console.log('image load')\r\n                loadedLen++;\r\n    \r\n                if (callbacks.onProgress && typeof callbacks.onProgress === 'function') {\r\n                    callbacks.onProgress.call(this, len, loadedLen);\r\n                }\r\n    \r\n                if (loadedLen === len && callbacks.onComplete && typeof callbacks.onComplete === 'function') {\r\n                    callbacks.onComplete.call(null);\r\n                }\r\n            }\r\n\r\n            image.src = resource;\r\n\r\n            if (image.complete) {\r\n                image.load();\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 在舞台上创建一个物体\r\n     * @param {mixed} el 元素对象\r\n     * @param {int} width \r\n     * @param {int} height \r\n     * @param {int} left \r\n     * @param {int} right \r\n     * @returns {JStage.Obj}\r\n     */\r\n    createObj: function(el, width, height, left, right) {\r\n        var obj = new JStage.Obj(el, width, height, left, right);\r\n        this.appendObj(obj);\r\n        return obj;\r\n    },\r\n\r\n    /**\r\n     * 初始化舞台\r\n     */\r\n    init: function() {\r\n        var self = this;\r\n\r\n        this.setScale(this.el.offsetWidth, this.el.offsetHeight);\r\n        \r\n        this.el.style.width = this.width * this.scale + 'px';\r\n        this.el.style.height = this.height * this.scale + 'px';\r\n\r\n        // 将舞台元素准备到位\r\n        this.objs.forEach(function(obj) {\r\n            obj.getReady();\r\n\r\n            if (obj.duration > self.duration) {\r\n                self.duration = obj.duration;\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 重置舞台元素实际尺寸\r\n     * @param {int|float} width \r\n     * @param {int|float} height \r\n     */\r\n    resizeEl: function(width, height) {\r\n        this.setScale(width, height)\r\n\r\n        // 设置舞台元素的尺寸\r\n        this.el.style.width = this.width * this.scale + 'px';\r\n        this.el.style.height = this.height * this.scale + 'px';\r\n\r\n        this.objs.forEach(function(obj) {\r\n            obj.recal();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 设置舞台的缩放比例\r\n     * @param {int|float} width 舞台元素实际宽度\r\n     * @param {int|float} height 舞台元素实际宽度 \r\n     */\r\n    setScale: function(width, height) {\r\n        var wScale = width / this.width;\r\n        var hScale = height / this.height;\r\n\r\n        if (wScale > hScale) {\r\n            this.scale = hScale;\r\n        } else {\r\n            this.scale = wScale;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    start: function() {\r\n        if (!!window.requestAnimationFrame) {\r\n            window.requestAnimationFrame(this.update.bind(this));\r\n            return;\r\n        }\r\n\r\n        this.objs.forEach(function(forEach) {\r\n            if (!obj.isStatic()) {\r\n                obj.setProgress(1);\r\n            }\r\n        });\r\n    },\r\n\r\n    update: function(timestamp) {\r\n        if (!this.startTimestamp) {\r\n            this.startTimestamp = timestamp;\r\n        }\r\n\r\n        this.currentTimestamp = timestamp;\r\n\r\n        var finished;\r\n\r\n        for (var i = 0, l = this.objs.length; i < l; i++) {\r\n            var obj = this.objs[i];\r\n\r\n            if (!obj.isStatic()) {\r\n                if (!obj.isCompleted()) {\r\n                    finished = false;\r\n\r\n                    obj.render();\r\n                }\r\n            }\r\n        }\r\n\r\n        // 动画没有结束则继续执行\r\n        if (finished === false) {\r\n            window.requestAnimationFrame(this.update.bind(this));\r\n        }\r\n    },\r\n    \r\n    setTime: function(time) {\r\n        for (var i = 0, l = this.objs.length; i < l; i++) {\r\n            if (!this.objs[i].isStatic()) {\r\n                this.objs[i].setTime(time);\r\n            }\r\n        }\r\n    },\r\n\r\n    setProgress: function(progress) {\r\n        var time = this.duration * progress;\r\n        this.setTime(time);\r\n    },\r\n\r\n    /**\r\n     * 往舞台上添加物体\r\n     * @param {JShow.Obj} obj\r\n     */\r\n    appendObj: function(obj) {\r\n        if (!obj.stage && obj.stage !== this) {\r\n            this.objs.push(obj);\r\n            obj.setStage(this);\r\n        }\r\n    }\r\n};","JStage.Obj = function(el, width, height, left, top) {\r\n    this.el,\r\n    this.width,\r\n    this.height,\r\n    this.left,\r\n    this.top,\r\n    this.duration = 0;\r\n    this.transform = {\r\n        scaleX: 1,\r\n        scaleY: 1,\r\n    },\r\n    this.transformState = {}, // transform中间状态\r\n    this.transformPrevState = {}, // transform 上一阶段完成状态\r\n    this.style = {\r\n        opacity: 1,\r\n    },\r\n    this.styleState = {}, // style 中间状态\r\n    this.stylePrevState = {}, // style 上一阶段完成状态\r\n    this.stage,\r\n    this.prevObj,\r\n    this.status = JStage.Obj.IS_STATIC,\r\n    this.scripts = [];\r\n\r\n    this.setEl(el);\r\n    this.setSize(width, height);\r\n    this.setPosition(left, top);\r\n}\r\n\r\nJStage.Obj.IS_IDLE = 0;\r\nJStage.Obj.IS_COMPLETED = 2;\r\nJStage.Obj.IS_ANIMATING = 3;\r\nJStage.Obj.IS_STATIC = 4;\r\n\r\nJStage.Obj.prototype = {\r\n    /**\r\n     * 设置物体尺寸\r\n     * @param {int} width\r\n     * @param {int} height\r\n     * @returns {this}\r\n     */\r\n    setSize: function(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.setStyle('width', width)\r\n            .setStyle('height', height);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 设置物体位置\r\n     * @param {int} left\r\n     * @param {int} top\r\n     * @returns {this}\r\n     */\r\n    setPosition: function(left, top) {\r\n        this.left = left;\r\n        this.top = top;\r\n\r\n        this.setStyle('left', left)\r\n            .setStyle('top', top);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 设置物体变化\r\n     * @param {string} func\r\n     * @param {int} value\r\n     */\r\n    setTransform: function(func, value) {\r\n        this.transform[func] = value;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 设置舞台元素的样式\r\n     * @param {string} property \r\n     * @param {mixed} value \r\n     * @param {this}\r\n     */\r\n    setStyle: function(property, value) {\r\n        this.style[property] = value;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 设置物体的动画脚本\r\n     * @param {array} scripts\r\n     * @returns {this}\r\n     */\r\n    setScripts: function(scripts) {\r\n        this.scripts = scripts;\r\n    },\r\n\r\n    /**\r\n     * 添加单个脚本\r\n     * @param {string} property\r\n     * @param {mixed} value\r\n     * @param {mixed} duration\r\n     * @param {string} timingFunction\r\n     * @param {mixed} delay\r\n     */\r\n    addScript: function(property, value, duration, timingFunction, delay) {\r\n        if (this.isStatic()) {\r\n            this.status = JStage.Obj.IS_IDLE;\r\n        }\r\n\r\n        this.scripts.push(new JStage.Script(property, value, duration, timingFunction, delay));\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 获得当前元素的缩放比例\r\n     * @returns {float}\r\n     */\r\n    getScale: function() {\r\n        return this.stage.scale;\r\n    },\r\n\r\n    /**\r\n     * 获得当前舞台的开始时间戳\r\n     * @returns {float}\r\n     */\r\n    getStartTimestamp: function() {\r\n        return this.stage.startTimestamp;\r\n    },\r\n\r\n    /**\r\n     * 获得当前舞台的当前时间戳\r\n     * @returns {float}\r\n     */\r\n    getCurrentTimestamp: function() {\r\n        return this.stage.currentTimestamp;\r\n    },\r\n\r\n    /**\r\n     * 将舞台元素准备好\r\n     */\r\n    getReady: function() {\r\n        // 初始化元素样式状态，包括当前状态以及阶段状态\r\n        for (var prop in this.style) {\r\n            this.stylePrevState[prop] = this.style[prop];\r\n            this.styleState[prop] = this.style[prop];\r\n        }\r\n\r\n        // 初始化元素变换状态，包括当前状态以及阶段状态\r\n        for (var func in this.transform) {\r\n            this.transformPrevState[func] = this.transform[func];\r\n            this.transformState[func] = this.transform[func];\r\n        }\r\n\r\n        this.duration = this.getDuration();\r\n        this.renderStyle(this.styleState);\r\n        this.renderTransform(this.transformState);\r\n    },\r\n\r\n    /**\r\n     * 设置元素层尺寸\r\n     * @deprecated\r\n     * @returns {this}\r\n     */\r\n    setElSize: function() {\r\n        this.setElWidth(this.width)\r\n            .setElHeight(this.height);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 设置元素层宽度\r\n     * @deprecated\r\n     * @param {int} width\r\n     * @returns {this}\r\n     */\r\n    setElWidth: function(width) {\r\n        this.el.style.width = width * this.getScale() + 'px';\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 设置元素层高度\r\n     * @deprecated\r\n     * @param {int} height\r\n     * @returns {this}\r\n     */\r\n    setElHeight: function(height) {\r\n        this.el.style.height = height * this.getScale() + 'px';\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @deprecated\r\n     * @returns {this}\r\n     */\r\n    setElPosition: function() {\r\n        this.setElLeft(this.left)\r\n            .setElTop(this.top);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @deprecated\r\n     * @param {int|float} left\r\n     * @returns {this} \r\n     */\r\n    setElLeft: function(left) {\r\n        this.el.style.left = left * this.getScale() + 'px';\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @deprecated\r\n     * @param {int|float} top\r\n     * @returns {this} \r\n     */\r\n    setElTop: function(top) {\r\n        this.el.style.top = top * this.getScale() + 'px';\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @deprecated\r\n     * @returns {this}\r\n     */\r\n    setElStyle: function() {\r\n        this.renderStyle(this.style);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @deprecated\r\n     * @returns {this}\r\n     */\r\n    setElTransform: function() {\r\n        this.renderTransform(this.transform);\r\n        return this;\r\n    },\r\n\r\n    setEl: function(el) {\r\n        this.el = JStage.getEl(el);\r\n\r\n        if (['absolute'].indexOf(this.el.style.position) < 0) {\r\n            console.warn('Stage object position style should be \\'absolute\\'');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 判断元素是否正在执行动画\r\n     * @returns {boolean}\r\n     */\r\n    isAnimating: function() {\r\n        return this.status === JStage.Obj.IS_ANIMATING;\r\n    },\r\n\r\n    /**\r\n     * 判断元素动画是否已经完成\r\n     * @returns {boolean}\r\n     */\r\n    isCompleted: function() {\r\n        return this.status === JStage.Obj.IS_COMPLETED;\r\n    },\r\n\r\n    /**\r\n     * 判断元素是否是静止元素\r\n     * @returns {boolean}\r\n     */\r\n    isStatic: function() {\r\n        return this.status === JStage.Obj.IS_STATIC;\r\n    },\r\n\r\n    /**\r\n     * 判断元素是否是等待动画执行状态\r\n     * @returns {boolean}\r\n     */\r\n    isIdle: function() {\r\n        return this.status === JStage.Obj.IS_IDLE;\r\n    },\r\n\r\n    /**\r\n     * 重计算部分脚本\r\n     * 主要用于更新场景大小变化后元素的各种尺寸和位置相关属性\r\n     */\r\n    recal: function() {\r\n        if (!this.isAnimating()) {\r\n            this.renderStyle(this.styleState);\r\n            this.renderTransform(this.transformState);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 将物体添加到指定的舞台上\r\n     * @param {JStage.Stage} stage\r\n     */\r\n    appendToStage: function(stage) {\r\n        stage.appendObj(this);\r\n    },\r\n\r\n    /**\r\n     * 设置物体到指定的舞台上\r\n     * @param {JStage.setStage} stage\r\n     */\r\n    setStage: function(stage) {\r\n        this.stage = stage;\r\n    },\r\n\r\n    render: function() {\r\n        var self = this;\r\n        var completed = true;\r\n\r\n        this.scripts.forEach(function(script) {\r\n            // 如果动画已完成则不继续\r\n            if (!script.isCompleted) {\r\n                completed = false;\r\n                var startTimestamp = self.getStartTimestamp();\r\n\r\n                // 如果配有达到延迟时间则不继续\r\n                if (script.delay > 0) {\r\n                    startTimestamp += script.delay;\r\n\r\n                    if (startTimestamp >= self.getCurrentTimestamp()) {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // 需要考虑时间精度跳跃问题\r\n                var progress = (self.getCurrentTimestamp() - startTimestamp) / script.duration;\r\n\r\n                // 如果已超过动画执行时间，标记脚本结束并执行最后一次progress = 1\r\n                if (progress > 1) {\r\n                    script.completed();\r\n                    progress = 1;\r\n                }\r\n                \r\n                self.updateState(script, progress);\r\n            }\r\n        });\r\n\r\n        this.renderStyle(this.styleState);\r\n        this.renderTransform(this.transformState);\r\n\r\n        this.status = !!completed ? JStage.Obj.IS_COMPLETED : JStage.Obj.IS_ANIMATING;\r\n    },\r\n\r\n    /**\r\n     * 重置舞台元素状态\r\n     */\r\n    reset: function() {\r\n        this.getReady();\r\n    },\r\n\r\n    /**\r\n     * 设置舞台播放到指定毫秒数\r\n     * @param {float} time 舞台播放到指定毫秒数\r\n     */\r\n    setTime: function(time) {\r\n        // 重置元素\r\n        this.reset();\r\n\r\n        var self = this;\r\n        \r\n        this.scripts.forEach(function(script) {\r\n            var startTimestamp = 0;\r\n\r\n            // 如果配有达到延迟时间则不继续\r\n            if (script.delay > 0) {\r\n                startTimestamp = script.delay;\r\n\r\n                if (startTimestamp >= time) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // 需要考虑时间精度跳跃问题\r\n            var progress = (time - startTimestamp) / script.duration;\r\n\r\n            // 如果已超过动画执行时间，标记脚本结束并执行最后一次progress = 1\r\n            if (progress > 1) {\r\n                progress = 1;\r\n            }\r\n\r\n            self.updateState(script, progress);\r\n        });\r\n\r\n        this.renderStyle(this.styleState);\r\n        this.renderTransform(this.transformState);\r\n    },\r\n\r\n    /**\r\n     * 获得动画时间，这个时间包含延迟时间\r\n     * @returns {int}\r\n     */\r\n    getDuration: function() {\r\n        var duration = 0;\r\n        \r\n        this.scripts.forEach(function(script) {\r\n            var scriptDuration = script.delay + script.duration;\r\n            \r\n            if (scriptDuration > duration) {\r\n                duration = scriptDuration;\r\n            }\r\n        });\r\n\r\n        return duration;\r\n    },\r\n\r\n    /**\r\n     * 更新舞台元素的状态\r\n     * @param {JStage.Script} script \r\n     * @param {float} progress \r\n     */\r\n    updateState: function(script, progress) {\r\n        if (script.isTransform()) {\r\n            this.transformState[script.property] = (\r\n                !this.transformPrevState[script.property] ? 0 : this.transformPrevState[script.property]\r\n            ) - 0 + script.getProgressValue(progress);\r\n\r\n            // 保存阶段性属性\r\n            if (progress === 1) {\r\n                this.transformPrevState[script.property] = this.transformState[script.property];\r\n            }\r\n        } else {\r\n            this.styleState[script.property] = (\r\n                !this.stylePrevState[script.property] ? 0 : this.stylePrevState[script.property]\r\n            ) - 0 + script.getProgressValue(progress);\r\n\r\n            // 保存阶段性属性\r\n            if (progress === 1) {\r\n                this.stylePrevState[script.property] = this.styleState[script.property];\r\n            }\r\n        }\r\n    },\r\n\r\n    renderStyle: function(style) {\r\n        for (var prop in style) {\r\n            if (['left', 'top', 'width', 'height'].indexOf(prop) > -1) {\r\n                this.el.style[prop] = style[prop] * this.getScale() + 'px';\r\n            } else {\r\n                this.el.style[prop] = style[prop];\r\n            }\r\n        }\r\n    },\r\n\r\n    renderTransform: function(transform) {\r\n        var transformStyle = '';\r\n\r\n        for (var i in transform) {\r\n            switch (i) {\r\n                case 'translateX':\r\n                case 'translateY':\r\n                    transformStyle += i + '(' + transform[i] + this.getScale() + 'px) ';\r\n                    break;\r\n                case 'rotate':\r\n                case 'skewX':\r\n                case 'skewY':\r\n                    transformStyle += i + '(' + transform[i] + 'deg) ';\r\n                    break;\r\n                case 'scaleX':\r\n                case 'scaleY':\r\n                    transformStyle += i + '(' + transform[i] + ') ';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (!!transformStyle) {\r\n            this.el.style.transform = transformStyle;\r\n        }\r\n    }\r\n};","/**\r\n * 元素脚本\r\n * @param {string} property\r\n * @param {mixed} value 变化值，不是目标值\r\n * @param {mixed} duration\r\n * @param {string} timingFunction\r\n * @param {int} delay 毫秒单位\r\n */\r\nJStage.Script = function(property, value, duration, timingFunction, delay) {\r\n    this.transforms = ['scaleX', 'scaleY', 'skewX', 'skewY', 'rotate', 'translateX', 'translateY'];\r\n\r\n    this.property = property;\r\n    this.value = value;\r\n    this.duration = this.normalizeTime(duration);\r\n    this.timingFunction = !!timingFunction ? timingFunction : 'linear';\r\n    this.delay = this.normalizeTime(delay);\r\n    this.isCompleted = false;\r\n};\r\n\r\nJStage.Script.prototype = {\r\n    completed: function() {\r\n        this.isCompleted = true;\r\n    },\r\n\r\n    isTransform: function() {\r\n        return this.transforms.indexOf(this.property) > -1;\r\n    },\r\n\r\n    getTransitionStyle: function() {\r\n        return this.property + ' ' + this.duration + 'ms ' + this.timingFunction + ' ' + this.delay + 'ms';\r\n    },\r\n\r\n    normalizeTime: function(time) {\r\n        if (!time) {\r\n            return 0;\r\n        }\r\n\r\n        if (time.indexOf('ms') > 0) {\r\n            return time.slice(0, -2) - 0;\r\n        } else if (time.indexOf('s') > 0) {\r\n            return time.slice(0, -1) * 1000;\r\n        } else if (isNaN(time)) {\r\n            throw 'Invalid time';\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 根据运行进度来计算脚本当前进度的值\r\n     * @param {float} progress\r\n     */\r\n    getProgressValue: function(progress) {\r\n        return progress * this.value;\r\n    }\r\n};","// Uses Node, AMD or browser globals to create a module.\r\n\r\n// If you want something that will work in other stricter CommonJS environments,\r\n// or if you need to create a circular dependency, see commonJsStrict.js\r\n\r\n// Defines a module \"returnExports\" that depends another module called \"b\".\r\n// Note that the name of the module is implied by the file name. It is best\r\n// if the file name and the exported global have matching names.\r\n\r\n// If the 'b' module also uses this type of boilerplate, then\r\n// in the browser, it will create a global .b that is used below.\r\n\r\n// If you do not want to support the browser global path, then you\r\n// can remove the `root` use and the passing `this` as the first arg to\r\n// the top function.\r\n\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like environments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals (root is window)\r\n        root.JStage = factory();\r\n    }\r\n})(window, function () {\r\n    // Just return a value to define the module export.\r\n    // This example returns an object, but the module\r\n    // can return a function as the exported value.\r\n    return JStage;\r\n});"]}