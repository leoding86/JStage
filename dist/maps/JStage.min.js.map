{"version":3,"sources":["JStage.js","Obj.js","Script.js","index.js"],"names":["JStage","el","width","height","this","getEl","scale","startTimestamp","currentTimestamp","duration","status","IS_IDLE","currentSetupOffsets","loops","resources","objs","document","querySelector","jQuery","Node","nodeType","normalizeTime","time","indexOf","slice","isNaN","getStyle","prop","undefined","getComputedStyle","currentStyle","getPropertyValue","IS_FINISHED","IS_ANIMATING","prototype","addResource","resource","push","loadResources","callbacks","len","length","loadedLen","forEach","image","Image","onload","onProgress","call","onComplete","src","complete","load","createObj","left","right","obj","Obj","appendObj","isAnimating","inSetup","setupOffset","addCurrentSetupOffset","removeFromCurrentSetups","index","splice","init","self","setScale","offsetWidth","offsetHeight","style","getReady","standby","resizeEl","recal","wScale","hScale","start","startSetup","OPEN_SETUP","window","requestAnimationFrame","update","bind","isStatic","setProgress","startLoop","offset","setupOffsets","currentIndex","timestamp","updateSetup","updateLoop","finished","hasSetup","isCompleted","setTime","progress","stage","setStage","top","state","intermediateState","setups","propDiff","executingScripts","currentSetup","IS_STATIC","setEl","setSize","setPosition","PROP_DEFAULT","scaleX","scaleY","translateX","translateY","rotate","skew","skewX","skewY","TRANSFORMS","INIT_SETUP","IS_COMPLETED","addBatchSetups","addSetup","setState","value","getPropDefaultValue","createSetup","getSetup","key","scripts","Array","script","addScript","addSetups","addLoopSetup","setup","addOpenSetup","Script","property","delay","timingFunction","getPropValue","getPropDiffVal","from","to","toLowerCase","createPropDiff","toValue","parseInt","diffVal","fromVal","patchPropDiff","getPropDiff","updateIntermediateState","render","loopSetup","performance","now","Date","getCurrentTimestamp","isComplete","isSkip","executing","isExecuting","skip","getStartTimestamp","console","log","renderState","transformStyle","getScale","transform","openSetup","resetSetup","getDuration","getSetupReady","finState","getFinState","isIdle","appendToStage","reset","scriptDuration","durtaion","propDelay","transforms","id","i","IDLE","EXECUTING","SKIP","COMPLETE","getProgressValue","root","factory","define","amd","module","exports"],"mappings":"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","file":"../JStage.min.js","sourcesContent":["/**\n * 舞台构造函数\n * @constructor\n * @param {int} el\n * @param {int} width 舞台的标准宽度，不是元素的实际宽度\n * @param {int} height 舞台的标准高度，不是元素的实际高度\n */\nfunction JStage(el, width, height) {\n    this.el = JStage.getEl(el);\n    this.width = width,\n    this.height = height,\n    this.scale,\n    this.startTimestamp,\n    this.currentTimestamp,\n    this.duration = 0,\n    this.status = JStage.IS_IDLE,\n    this.currentSetupOffsets = [],\n    this.loops = [],\n    this.resources = [],\n    this.objs = [];\n}\n\nJStage.getEl = function(el) {\n    if (typeof el === 'string') {\n        return document.querySelector(el);\n    } else if (el instanceof jQuery) {\n        return el[0];\n    } else if (typeof el === 'object' &&\n        (el instanceof Node && el.nodeType > 0)\n    ) {\n        return el;\n    } else {\n        throw 'Invalid el';\n    }\n};\n\nJStage.normalizeTime = function(time) {\n    if (!time) {\n        return 0;\n    }\n\n    if (typeof time === 'number') {\n        return time;\n    } else if (time.indexOf('ms') > 0) {\n        return time.slice(0, -2) - 0;\n    } else if (time.indexOf('s') > 0) {\n        return time.slice(0, -1) * 1000;\n    } else if (isNaN(time)) {\n        return time;\n    }\n};\n\nJStage.getStyle = function(el, prop) {\n    if (typeof getComputedStyle === undefined) {\n        return el.currentStyle[prop];\n    } else {\n        return getComputedStyle(el, null).getPropertyValue(prop);\n    }\n};\n\nJStage.IS_IDLE = 0;\nJStage.IS_FINISHED = 1;\nJStage.IS_ANIMATING = 2;\n\nJStage.prototype = {\n    /**\n     * 添加资源\n     * @param {string} resource\n     */\n    addResource: function(resource) {\n        if (this.resources.indexOf(resource) < 0) {\n            this.resources.push(resource);\n        }\n\n        return this;\n    },\n\n    loadResources: function(callbacks) {\n        var len = this.resources.length;\n        var loadedLen = 0;\n\n        this.resources.forEach(function(resource) {\n            var image = new Image;\n            image.onload = function() {\n                loadedLen++;\n\n                if (callbacks.onProgress && typeof callbacks.onProgress === 'function') {\n                    callbacks.onProgress.call(this, len, loadedLen);\n                }\n\n                if (loadedLen === len && callbacks.onComplete && typeof callbacks.onComplete === 'function') {\n                    callbacks.onComplete.call(null);\n                }\n            }\n\n            image.src = resource;\n\n            if (image.complete) {\n                image.load();\n            }\n        });\n    },\n\n    /**\n     * 在舞台上创建一个物体\n     * @param {mixed} el 元素对象\n     * @param {int} width\n     * @param {int} height\n     * @param {int} left\n     * @param {int} right\n     * @returns {JStage.Obj}\n     */\n    createObj: function(el, width, height, left, right) {\n        var obj = new JStage.Obj(el, width, height, left, right);\n        this.appendObj(obj);\n        return obj;\n    },\n\n    isAnimating: function() {\n        return this.status === JStage.IS_ANIMATING;\n    },\n\n    inSetup: function(setupOffset) {\n        return this.currentSetupOffsets.indexOf(setupOffset) > -1;\n    },\n\n    addCurrentSetupOffset: function(setupOffset) {\n        if (this.currentSetupOffsets.indexOf(setupOffset) < 0) {\n            this.currentSetupOffsets.push(setupOffset);\n        }\n    },\n\n    removeFromCurrentSetups: function(setupOffset) {\n        var index = this.currentSetupOffsets.indexOf(setupOffset);\n\n        if (index > -1) {\n            this.currentSetupOffsets.splice(index, 1);\n        }\n    },\n\n    /**\n     * 初始化舞台\n     */\n    init: function() {\n        var self = this;\n\n        this.setScale(this.el.offsetWidth, this.el.offsetHeight);\n\n        this.el.style.width = this.width * this.scale + 'px';\n        this.el.style.height = this.height * this.scale + 'px';\n\n        // 将舞台元素准备到位\n        this.objs.forEach(function(obj) {\n            obj.getReady();\n\n            if (obj.duration > self.duration) {\n                self.duration = obj.duration;\n            }\n        });\n    },\n\n    standby: function(setupOffset) {\n        this.startTimestamp = null;\n        this.currentTimestamp = null;\n\n        if (undefined === setupOffset) {\n            return;\n        }\n\n        this.objs.forEach(function(obj) {\n            obj.standby(setupOffset);\n        }, this);\n    },\n\n    /**\n     * 重置舞台元素实际尺寸\n     * @param {int|float} width\n     * @param {int|float} height\n     */\n    resizeEl: function(width, height) {\n        this.setScale(width, height)\n\n        // 设置舞台元素的尺寸\n        this.el.style.width = this.width * this.scale + 'px';\n        this.el.style.height = this.height * this.scale + 'px';\n\n        this.objs.forEach(function(obj) {\n            obj.recal();\n        });\n    },\n\n    /**\n     * 设置舞台的缩放比例\n     * @param {int|float} width 舞台元素实际宽度\n     * @param {int|float} height 舞台元素实际宽度\n     */\n    setScale: function(width, height) {\n        var wScale = width / this.width;\n        var hScale = height / this.height;\n\n        if (wScale > hScale) {\n            this.scale = hScale;\n        } else {\n            this.scale = wScale;\n        }\n\n        return this;\n    },\n\n    start: function() {\n        this.startSetup(JStage.Obj.OPEN_SETUP);\n    },\n\n    startSetup: function(setupOffset) {\n        this.addCurrentSetupOffset(setupOffset);\n        this.standby(setupOffset);\n\n        if (!!window.requestAnimationFrame) {\n            if (!this.isAnimating()) {\n                this.status = JStage.IS_ANIMATING;\n                window.requestAnimationFrame(this.update.bind(this));\n            }\n            return;\n        }\n\n        this.objs.forEach(function(obj) {\n            if (!obj.isStatic()) {\n                obj.setProgress(1);\n            }\n        });\n    },\n\n    startLoop: function(offset, setupOffsets) {\n        if (!this.loops[offset]) {\n            this.loops[offset] = {\n                currentIndex: 0,\n                setupOffsets: []\n            };\n\n            setupOffsets.forEach(function (setupOffset) {\n                this.loops[offset].setupOffsets.push(setupOffset);\n            });\n        }\n    },\n\n    update: function(timestamp) {\n        if (!this.startTimestamp) {\n            this.startTimestamp = timestamp;\n        }\n\n        this.currentTimestamp = timestamp;\n\n        this.updateSetup(timestamp);\n        this.updateLoop(timestamp);\n\n        window.requestAnimationFrame(this.update.bind(this));\n    },\n\n    updateSetup: function() {\n        this.currentSetupOffsets.forEach(function(setupOffset) {\n            var finished;\n\n            this.objs.forEach(function(obj) {\n\n                // console.log(setupOffset, obj, obj.hasSetup(setupOffset), obj.isStatic(), obj.isCompleted());\n\n                if (obj.hasSetup(setupOffset) &&\n                    !(obj.isStatic() || obj.isCompleted())\n                ) {\n                    finished = false;\n                    obj.update(setupOffset);\n                }\n            }, this);\n\n            if (finished === undefined) {\n                this.removeFromCurrentSetups(setupOffset);\n            }\n        }, this);\n    },\n\n    updateLoop: function() {\n        // this.loops.forEach(function(loop) {\n        //     var finished;\n        //     var setupOffset = loop.setupOffsets[loop.currentIndex];\n\n        //     this.objs.forEach(function(obj) {\n        //         if (obj.hasSetup(setupOffset) &&\n        //             !(obj.isStatic() || obj.isCompleted())\n        //         ) {\n        //             finished = false;\n        //             obj.update(setupOffset)\n        //         }\n        //     }, this);\n\n        //     if (finished !== false) {\n        //         if ((loop.currentIndex + 1) > loop.setupOffsets.length) {\n        //             loop.currentIndex = 0;\n        //         } else {\n        //             loop.currentIndex++;\n        //         }\n        //     }\n        // });\n    },\n\n    setTime: function(time) {\n        //\n    },\n\n    setProgress: function(progress) {\n        //\n    },\n\n    /**\n     * 往舞台上添加物体\n     * @param {JShow.Obj} obj\n     */\n    appendObj: function(obj) {\n        if (!obj.stage && obj.stage !== this) {\n            this.objs.push(obj);\n            obj.setStage(this);\n        }\n    }\n};","JStage.Obj = function(el, width, height, left, top) {\n    this.el, // dom对象\n    this.state = {},\n    this.intermediateState = {} // 中间状态\n    this.setups = {}, // 动画状态\n    this.loops = {},\n    this.propDiff = {},\n    this.executingScripts = {},\n    this.currentSetup,\n\n    this.width,\n    this.height,\n    this.left,\n    this.top,\n    this.duration = 0;\n    this.stage,\n    this.status = JStage.Obj.IS_STATIC,\n\n    this.setEl(el);\n    this.setSize(width, height);\n    this.setPosition(left, top);\n}\n\nJStage.Obj.PROP_DEFAULT = {\n    scale   : 1,\n    scaleX  : 1,\n    scaleY  : 1,\n    translateX  : 0,\n    translateY  : 0,\n    rotate  : 0,\n    skew    : 0,\n    skewX   : 0,\n    skewY   : 0\n};\nJStage.Obj.TRANSFORMS = [\n    'translateX',\n    'translateY',\n    'rotate',\n    'skew',\n    'skewX',\n    'skewY',\n    'scale',\n    'scaleX',\n    'scaleY',\n];\nJStage.Obj.INIT_SETUP = 'INIT_SETUP'; // 初始化状态\nJStage.Obj.OPEN_SETUP = 'OPEN_SETUP'; // 开场状态\nJStage.Obj.IS_IDLE = 0;\nJStage.Obj.IS_COMPLETED = 2;\nJStage.Obj.IS_ANIMATING = 3;\nJStage.Obj.IS_STATIC = 4;\n\nJStage.Obj.addBatchSetups = function(objs, setups) {\n    objs.forEach(function(obj) {\n        for (var offset in setups) {\n            obj.addSetup(offset, setups[offset]);\n        }\n    });\n}\n\nJStage.Obj.prototype = {\n    setState: function(prop, value) {\n        this.state[prop] = value;\n        return this;\n    },\n\n    /**\n     *\n     * @param {string} prop\n     */\n    getPropDefaultValue: function(prop) {\n        if (undefined === JStage.Obj.PROP_DEFAULT[prop]) {\n            return 0;\n        } else {\n            return JStage.Obj.PROP_DEFAULT[prop];\n        }\n    },\n\n    createSetup: function(offset) {\n        if (undefined === this.getSetup(offset)) {\n            this.setups[offset] = {\n                key: offset,\n                scripts: [],\n                setups: [],\n                index: 0,\n                startTimestamp: null\n            }\n        }\n    },\n\n    /**\n     * 添加状态脚本\n     * @param {string} offset\n     * @param {array} scripts\n     */\n    addSetup: function(offset, scripts) {\n        this.createSetup(offset);\n\n        if (scripts instanceof Array && scripts.length > 0) {\n            scripts.forEach(function(script) {\n                this.addScript(offset, script)\n            }, this);\n        }\n\n        return this;\n    },\n\n    /**\n     *\n     * @param {object} setups\n     */\n    addSetups: function(setups) {\n        for (var offset in setups) {\n            this.addSetup(offset, setups[offset]);\n        }\n    },\n\n    addLoopSetup: function(offset, setupOffsets) {\n        this.createSetup(offset);\n\n        setupOffsets.forEach(function(setupOffset) {\n            var setup = this.getSetup(setupOffset);\n\n            if (setup) {\n                this.getSetup(offset).setups.push(setup);\n            }\n        }, this);\n    },\n\n    addOpenSetup: function(scripts) {\n        this.addSetup(JStage.Obj.OPEN_SETUP, scripts);\n        return this;\n    },\n\n    /**\n     * 为状态添加一个脚本\n     * @param {string} offset\n     * @param {object} script\n     */\n    addScript: function(offset, script) {\n        this.createSetup(offset);\n\n        this.status = JStage.Obj.IS_IDLE;\n\n        this.setups[offset].scripts.push(\n            new JStage.Script(script.property, script.value, script.duration, script.delay, script.timingFunction)\n        );\n\n        return this;\n    },\n\n    /**\n     *\n     * @param {string} offset\n     */\n    getSetup: function(offset) {\n        return this.setups[offset];\n    },\n\n    getPropValue: function(state, prop) {\n        return (undefined === state[prop]) ? this.getPropDefaultValue(prop) : state[prop];\n    },\n\n    getPropDiffVal: function(prop, from, to) {\n        if (prop.toLowerCase().indexOf('color') > -1) {\n            throw 'unsupported property ' + prop;\n        }\n\n        return to - from;\n    },\n\n    createPropDiff: function(script) {\n        var prop = script.property;\n        var toValue;\n\n        if (typeof script.value === 'string' &&\n            (script.value.indexOf('+') === 0 ||\n            script.value.indexOf('-') === 0)\n        ) {\n            toValue = this.getPropValue(this.state, prop) + parseInt(script.value)\n        } else {\n            toValue = script.value;\n        }\n\n        this.propDiff[script.property] = {\n            prop: prop,\n            diffVal: this.getPropDiffVal(\n                script.property,\n                this.getPropValue(this.state, prop),\n                toValue\n            ),\n            fromVal: this.getPropValue(this.state, prop)\n        };\n    },\n\n    patchPropDiff: function(propDiff, script) {\n        var prop = script.property;\n        var toValue;\n\n        if (typeof script.value === 'string' &&\n            (script.value.indexOf('+') === 0 ||\n            script.value.indexOf('-') === 0)\n        ) {\n            toValue = this.getPropValue(this.intermediateState, prop) + parseInt(script.value);\n        } else {\n            toValue = script.value;\n        }\n\n        propDiff.diffVal = this.getPropDiffVal(\n            script.property,\n            this.getPropValue(this.intermediateState, prop),\n            toValue\n        );\n        propDiff.fromVal = this.getPropValue(this.intermediateState, prop);\n    },\n\n    getPropDiff: function(offset) {\n        return this.propDiff[offset];\n    },\n\n    /**\n     *\n     * @param {object} propDIff\n     * @param {float} progress\n     */\n    updateIntermediateState: function(propDiff, progress) {\n        this.intermediateState[propDiff.prop] = progress * propDiff.diffVal + propDiff.fromVal;\n    },\n\n    update: function(setupOffset) {\n        this.render(setupOffset === undefined ? JStage.Obj.OPEN_SETUP : setupOffset);\n    },\n\n    render: function(setupOffset) {\n        var setup = this.currentSetup;\n\n        if (!setup) {\n            return;\n        }\n\n        if (setup.setups.length > 0) {\n            var loopSetup = setup.setups[setup.index];\n            // loop\n\n            if (!loopSetup.startTimestamp) {\n                loopSetup.startTimestamp = !!performance ? performance.now() : Date.now();\n            }\n\n            var startTimestamp;\n            var currentTimestamp = this.getCurrentTimestamp();\n            var scripts = loopSetup.scripts;\n            var complete;\n\n            scripts.forEach(function(script) {\n                if (script.isComplete() || script.isSkip()) {\n                    return;\n                }\n\n                startTimestamp = loopSetup.startTimestamp;\n\n                complete = false;\n\n                if (script.delay > 0) {\n                    startTimestamp += script.delay;\n                }\n\n                if (startTimestamp > currentTimestamp) {\n                    return;\n                }\n\n                var progress = (currentTimestamp - startTimestamp) / script.duration;\n\n                if (progress > 1) {\n                    progress = 1;\n                }\n\n                script.executing();\n\n                if (undefined === this.executingScripts[script.property]) {\n                    this.executingScripts[script.property] = script;\n                    // create prop diff\n                    this.createPropDiff(script);\n                }\n\n                if (this.executingScripts[script.property] !== script &&\n                    !(script.isSkip() || script.isComplete())\n                ) {\n                    if (this.executingScripts[script.property].isExecuting()) {\n                        this.executingScripts[script.property].skip();\n                    }\n\n                    this.executingScripts[script.property] = script;\n                    // patch prop diff\n                    this.patchPropDiff(this.getPropDiff(script.property), script);\n                }\n\n                this.updateIntermediateState(this.getPropDiff(script.property), progress);\n\n                if (progress === 1) {\n                    script.complete();\n                }\n            }, this);\n\n            if (complete !== false) {\n                loopSetup.startTimestamp = null;\n\n                if (setup.index >= (setup.setups.length - 1)) {\n                    setup.index = 0;\n                } else {\n                    setup.index++;\n                }\n\n                this.standby(setup.setups[setup.index]);\n            }\n        } else {\n            if (!setup.startTimestamp) {\n                setup.startTimestamp = this.getStartTimestamp();\n            }\n\n            var startTimestamp;\n            var currentTimestamp = this.getCurrentTimestamp();\n            var scripts = setup.scripts;\n            var complete;\n\n            scripts.forEach(function(script) {\n                if (script.isComplete() || script.isSkip()) {\n                    return;\n                }\n\n                startTimestamp = setup.startTimestamp;\n\n                complete = false;\n\n                if (script.delay > 0) {\n                    startTimestamp += script.delay;\n                }\n\n                if (startTimestamp > currentTimestamp) {\n                    return;\n                }\n\n                var progress = (currentTimestamp - startTimestamp) / script.duration;\n\n                if (progress > 1) {\n                    progress = 1;\n                }\n\n                script.executing();\n\n                if (undefined === this.executingScripts[script.property]) {\n                    this.executingScripts[script.property] = script;\n                    // create prop diff\n                    this.createPropDiff(script);\n                }\n\n                if (this.executingScripts[script.property] !== script &&\n                    !(script.isSkip() || script.isComplete())\n                ) {\n                    if (this.executingScripts[script.property].isExecuting()) {\n                        this.executingScripts[script.property].skip();\n                    }\n\n                    this.executingScripts[script.property] = script;\n                    // patch prop diff\n                    this.patchPropDiff(this.getPropDiff(script.property), script);\n                }\n\n                this.updateIntermediateState(this.getPropDiff(script.property), progress);\n\n                if (progress === 1) {\n                    script.complete();\n                }\n            }, this);\n\n            if (complete === false) {\n                this.status = JStage.Obj.IS_ANIMATING;\n            } else {\n                this.status = JStage.Obj.IS_COMPLETED;\n                setup.startTimestamp = null;\n            }\n\n            console.log(setup.key, this.status)\n        }\n\n        this.renderState();\n    },\n\n    renderState: function() {\n        for (var prop in this.intermediateState) {\n            if (JStage.Obj.TRANSFORMS.indexOf(prop) > -1) {\n                var transformStyle = '';\n\n                switch (prop) {\n                    case 'translateX':\n                    case 'translateY':\n                        transformStyle += prop + '(' + this.intermediateState[prop] + this.getScale() + 'px) ';\n                        break;\n                    case 'rotate':\n                    case 'skew':\n                    case 'skewX':\n                    case 'skewY':\n                        transformStyle += prop + '(' + this.intermediateState[prop] + 'deg) ';\n                        break;\n                    case 'scale':\n                    case 'scaleX':\n                    case 'scaleY':\n                        transformStyle += prop + '(' + this.intermediateState[prop] + ') ';\n                        break;\n                }\n            } else {\n                if (['left', 'top', 'width', 'height'].indexOf(prop) > -1) {\n                    this.el.style[prop] = this.intermediateState[prop] * this.getScale() + 'px';\n                } else {\n                    this.el.style[prop] = this.intermediateState[prop];\n                }\n            }\n        }\n\n        if (undefined !== transformStyle) {\n            this.el.style.transform = transformStyle;\n        }\n    },\n\n    /**\n     * 设置物体尺寸\n     * @param {int} width\n     * @param {int} height\n     * @returns {this}\n     */\n    setSize: function(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.setState('width', width)\n            .setState('height', height);\n\n        return this;\n    },\n\n    /**\n     * 设置物体位置\n     * @param {int} left\n     * @param {int} top\n     * @returns {this}\n     */\n    setPosition: function(left, top) {\n        this.left = left;\n        this.top = top;\n\n        this.setState('left', left)\n            .setState('top', top);\n\n        return this;\n    },\n\n    /**\n     * 获得当前元素的缩放比例\n     * @returns {float}\n     */\n    getScale: function() {\n        return this.stage.scale;\n    },\n\n    /**\n     * 获得当前舞台的开始时间戳\n     * @returns {float}\n     */\n    getStartTimestamp: function() {\n        return this.stage.startTimestamp;\n    },\n\n    /**\n     * 获得当前舞台的当前时间戳\n     * @returns {float}\n     */\n    getCurrentTimestamp: function() {\n        return this.stage.currentTimestamp;\n    },\n\n    /**\n     * 将舞台元素准备好\n     */\n    getReady: function() {\n        var openSetup = this.getSetup(JStage.Obj.OPEN_SETUP);\n\n        if (undefined !== openSetup) {\n            this.resetSetup(openSetup);\n            this.duration = this.getDuration(openSetup);\n        }\n\n        // 重置中间状态\n        this.intermediateState = {};\n\n        // 初始化元素样式状态，包括当前状态以及阶段状态\n        for (var prop in this.state) {\n            this.intermediateState[prop] = this.state[prop];\n        }\n\n        this.renderState();\n    },\n\n    getSetupReady: function(setupOffset) {\n        // 重置中间状态\n        this.intermediateState = {};\n\n        var setup = this.getSetup(setupOffset);\n        var finState = this.getFinState(setup);\n\n        for (var prop in setup.scripts) {\n            if (undefined === finState[prop]) {\n                finState[prop] = setup.scripts[prop];\n            }\n        }\n\n        for (var prop in finState) {\n            this.intermediateState[prop] = finState[prop];\n        }\n\n        this.duration = this.getDuration(setup);\n        this.renderState();\n    },\n\n    setEl: function(el) {\n        this.el = JStage.getEl(el);\n    },\n\n    /**\n     * 判断元素是否正在执行动画\n     * @returns {boolean}\n     */\n    isAnimating: function() {\n        return this.status === JStage.Obj.IS_ANIMATING;\n    },\n\n    /**\n     * 判断元素动画是否已经完成\n     * @returns {boolean}\n     */\n    isCompleted: function() {\n        return this.status === JStage.Obj.IS_COMPLETED;\n    },\n\n    /**\n     * 判断元素是否是静止元素\n     * @returns {boolean}\n     */\n    isStatic: function() {\n        return this.status === JStage.Obj.IS_STATIC;\n    },\n\n    /**\n     * 判断元素是否是等待动画执行状态\n     * @returns {boolean}\n     */\n    isIdle: function() {\n        return this.status === JStage.Obj.IS_IDLE;\n    },\n\n    /**\n     * 重计算部分脚本\n     * 主要用于更新场景大小变化后元素的各种尺寸和位置相关属性\n     */\n    recal: function() {\n        if (!this.isAnimating()) {\n            this.renderState();\n        }\n    },\n\n    /**\n     * 将物体添加到指定的舞台上\n     * @param {JStage.Stage} stage\n     */\n    appendToStage: function(stage) {\n        stage.appendObj(this);\n    },\n\n    /**\n     * 设置物体到指定的舞台上\n     * @param {JStage.setStage} stage\n     */\n    setStage: function(stage) {\n        this.stage = stage;\n    },\n\n    /**\n     * 重置舞台元素状态\n     */\n    reset: function() {\n        this.getReady();\n    },\n\n    /**\n     * 设置舞台播放到指定毫秒数\n     * @param {int} time 舞台播放到指定毫秒数\n     */\n    setTime: function(time) {\n        //\n    },\n\n    /**\n     * 获得动画时间，这个时间包含延迟时间\n     * @param {object} setup\n     * @returns {int}\n     */\n    getDuration: function(setup) {\n        var duration = 0;\n        var scriptDuration = 0;\n\n        setup.scripts.forEach(function(script) {\n            scriptDuration = script.duration + script.delay;\n\n            if (duration < scriptDuration) {\n                durtaion = scriptDuration;\n            }\n        });\n\n        return duration;\n    },\n\n    /**\n     * 获得设置的最终状态，需要处理同属性延迟执行的情况，比如两个left移动先后执行\n     * @param {object} setup\n     */\n    getFinState: function(setup) {\n        var finState = {};\n        var propDelay = {};\n\n        setup.scripts.forEach(function(script) {\n            if (undefined === propDelay[script.property]) {\n                propDelay[script.property] = script.delay;\n                finState[script.property] = script.property;\n            } else if (script.delay > propDelay[script.property]) {\n                propDelay[script.property] = script.delay;\n                finState[script.property] = script.property;\n            }\n        });\n\n        return finState;\n    },\n\n    /**\n     * 重置设置状态\n     * @param {object} setup\n     */\n    resetSetup: function(setup) {\n        setup.scripts.forEach(function(script) {\n            script.reset();\n        });\n    },\n\n    standby: function(offset) {\n        var setup = typeof offset === 'object' ? offset : this.getSetup(offset);\n\n        if (undefined === setup) {\n            return;\n        }\n\n        this.currentSetup = setup;\n        setup.startTimestamp = null;\n        this.status = JStage.Obj.IS_IDLE;\n        this.resetSetup(setup);\n    },\n\n    hasSetup: function(offset) {\n        return undefined !== this.setups[offset];\n    }\n};","/**\n * 元素脚本\n * @param {string} property\n * @param {mixed} value 变化值，不是目标值\n * @param {mixed} duration\n * @param {string} timingFunction\n * @param {int} delay 毫秒单位\n */\nJStage.Script = function(property, value, duration, delay, timingFunction) {\n    this.transforms = ['scaleX', 'scaleY', 'skewX', 'skewY', 'rotate', 'translateX', 'translateY'];\n\n    this.id = JStage.Script.i++;\n    this.property = property;\n    this.value = value;\n    this.duration = this.normalizeTime(duration);\n    this.timingFunction = !!timingFunction ? timingFunction : 'linear';\n    this.delay = this.normalizeTime(delay);\n    this.status = JStage.Script.IDLE;\n};\n\nJStage.Script.i = 0;\nJStage.Script.IDLE = 0;\nJStage.Script.EXECUTING = 1;\nJStage.Script.SKIP = 2;\nJStage.Script.COMPLETE = 3;\n\nJStage.Script.prototype = {\n    reset: function() {\n        this.status = JStage.Script.IDLE;\n    },\n\n    executing: function() {\n        this.status = JStage.Script.EXECUTING;\n    },\n\n    skip: function() {\n        this.status = JStage.Script.SKIP;\n    },\n\n    complete: function() {\n        this.status = JStage.Script.COMPLETE;\n    },\n\n    isExecuting: function() {\n        return this.status === JStage.Script.EXECUTING;\n    },\n\n    isSkip: function() {\n        return this.status === JStage.Script.SKIP;\n    },\n\n    isComplete: function() {\n        return this.status === JStage.Script.COMPLETE;\n    },\n\n    normalizeTime: function(time) {\n        if (!time) {\n            return 0;\n        }\n    \n        if (typeof time === 'number') {\n            return time;\n        } else if (time.indexOf('ms') > 0) {\n            return time.slice(0, -2) - 0;\n        } else if (time.indexOf('s') > 0) {\n            return time.slice(0, -1) * 1000;\n        } else if (isNaN(time)) {\n            return time;\n        }\n    },\n\n    /**\n     * 根据运行进度来计算脚本当前进度的值\n     * @param {float} progress\n     */\n    getProgressValue: function(progress) {\n        return progress * this.value;\n    }\n};","// Uses Node, AMD or browser globals to create a module.\n\n// If you want something that will work in other stricter CommonJS environments,\n// or if you need to create a circular dependency, see commonJsStrict.js\n\n// Defines a module \"returnExports\" that depends another module called \"b\".\n// Note that the name of the module is implied by the file name. It is best\n// if the file name and the exported global have matching names.\n\n// If the 'b' module also uses this type of boilerplate, then\n// in the browser, it will create a global .b that is used below.\n\n// If you do not want to support the browser global path, then you\n// can remove the `root` use and the passing `this` as the first arg to\n// the top function.\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.JStage = factory();\n    }\n})(window, function () {\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return JStage;\n});"]}