{"version":3,"sources":["JStage.shim.min.js"],"names":["root","factory","define","amd","module","exports","JStage","window"],"mappings":"CAgBA,SAAWA,EAAMC,GACS,mBAAXC,QAAyBA,OAAOC,IAEvCD,OAAOD,GACkB,iBAAXG,QAAuBA,OAAOC,QAI5CD,OAAOC,QAAUJ,IAGjBD,EAAKM,OAASL,IAXtB,CAaGM,OAAQ,WAIP,OAAOD","file":"../JStage.shim.min.js","sourcesContent":["// Uses Node, AMD or browser globals to create a module.\r\n\r\n// If you want something that will work in other stricter CommonJS environments,\r\n// or if you need to create a circular dependency, see commonJsStrict.js\r\n\r\n// Defines a module \"returnExports\" that depends another module called \"b\".\r\n// Note that the name of the module is implied by the file name. It is best\r\n// if the file name and the exported global have matching names.\r\n\r\n// If the 'b' module also uses this type of boilerplate, then\r\n// in the browser, it will create a global .b that is used below.\r\n\r\n// If you do not want to support the browser global path, then you\r\n// can remove the `root` use and the passing `this` as the first arg to\r\n// the top function.\r\n\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like environments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals (root is window)\r\n        root.JStage = factory();\r\n    }\r\n})(window, function () {\r\n    // Just return a value to define the module export.\r\n    // This example returns an object, but the module\r\n    // can return a function as the exported value.\r\n    return JStage;\r\n});"]}